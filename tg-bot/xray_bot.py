import logging
import subprocess
import time
import json
import random
import string
import threading
from datetime import datetime
from telegram import Update, ParseMode, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Updater,
    CommandHandler,
    CallbackContext,
    CallbackQueryHandler,
    ConversationHandler,
    MessageHandler,
    Filters
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = "7627035580:AAHYK4dlyX5eET0ilYmqSG2PVF59eWBnLUk"
ALLOWED_USERS = [371478024]
STATS_SCRIPT = "/app/scripts/precise_stats.sh"
CONFIG_FILE = "/app/config.json"
ACTIVE_CONN_SCRIPT = "/app/scripts/get_active_connections.sh"
ADD_USER_SCRIPT = "/app/scripts/add_client.sh"
DEL_USER_SCRIPT = "/app/scripts/del_client.sh"
TOGGLE_SCRIPT = "/app/scripts/toggle_client.sh"
SPEED_LIMIT_SCRIPT = "/app/scripts/speed_limit.sh"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ENTER_USERNAME = 1

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


# ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

def generate_random_name():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    letters = string.ascii_lowercase
    return 'user_' + ''.join(random.choice(letters) for _ in range(6))


def get_users_list():
    """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ config.json"""
    try:
        with open(CONFIG_FILE, 'r') as f:
            config = json.load(f)
        clients = config['inbounds'][1]['settings']['clients']
        return [client['email'] for client in clients]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
        return []


def get_active_users():
    """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        result = subprocess.run(
            [ACTIVE_CONN_SCRIPT],
            capture_output=True,
            text=True
        )

        if result.returncode == 0:
            users = list(set(result.stdout.strip().split('\n')))
            return ["üü¢ " + user for user in users if user]
        return []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return []


def unblock_user_after_time(username):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∞–π–º–µ—Ä—É"""
    try:
        result = subprocess.run(
            [TOGGLE_SCRIPT, username, "unblock"],
            capture_output=True,
            text=True
        )

        if result.returncode == 0:
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ {username}: {result.stderr}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ: {e}")


# ==================== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ====================

def start(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    if update.effective_user.id not in ALLOWED_USERS:
        update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='show_stats'),
         InlineKeyboardButton("üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data='list_users')],
        [InlineKeyboardButton("üü¢ –û–Ω–ª–∞–π–Ω —Å–µ–π—á–∞—Å", callback_data='active_users'),
         InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data='add_user')],
        [InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data='delete_user_menu'),
         InlineKeyboardButton("‚è∏ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞", callback_data='block_users')],
        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å Xray", callback_data='restart_xray')]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        update.message.reply_text(
            "üîπ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ VPN —Å–µ—Ä–≤–µ—Ä–æ–º</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode=ParseMode.HTML,
            reply_markup=reply_markup
        )
    else:
        update.callback_query.edit_message_text(
            "üîπ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ VPN —Å–µ—Ä–≤–µ—Ä–æ–º</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode=ParseMode.HTML,
            reply_markup=reply_markup
        )


def cancel(update: Update, context: CallbackContext):
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    update.message.reply_text('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞')
    start(update, context)
    return ConversationHandler.END


# ==================== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò ====================

def show_stats(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞—Ñ–∏–∫–∞"""
    try:
        query = update.callback_query
        query.answer()
        query.edit_message_text("üîÑ –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")

        result = subprocess.run(
            [STATS_SCRIPT],
            capture_output=True,
            text=True
        )

        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data='show_stats'),
             InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='main_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        current_time = datetime.now().strftime("%H:%M:%S")

        if result.returncode == 0:
            text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞</b> (–æ–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time})\n<pre>{result.stdout}</pre>"
        else:
            text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:\n<code>{result.stderr}</code>"

        query.edit_message_text(
            text=text,
            parse_mode=ParseMode.HTML,
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_stats: {e}")
        query.edit_message_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")


def list_users(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        query = update.callback_query
        query.answer()

        users = get_users_list()

        if not users:
            text = "‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        else:
            text = "üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n" + "\n".join(f"‚Ä¢ {user}" for user in users)

        keyboard = [
            [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='main_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        query.edit_message_text(
            text=text,
            parse_mode=ParseMode.HTML,
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ list_users: {e}")
        query.edit_message_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")


def show_active_users(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        query = update.callback_query
        query.answer()

        active_users = get_active_users()

        if not active_users:
            text = "üî¥ –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"
        else:
            text = "üü¢ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>\n\n" + "\n".join(active_users)

        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data='active_users'),
             InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='main_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        query.edit_message_text(
            text=text,
            parse_mode=ParseMode.HTML,
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_active_users: {e}")
        query.edit_message_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")


# ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ====================

def show_add_user_menu(update: Update, context: CallbackContext):
    """–ú–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        query = update.callback_query
        query.answer()

        keyboard = [
            [InlineKeyboardButton("üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –∏–º—è", callback_data='add_user_random')],
            [InlineKeyboardButton("‚å®Ô∏è –í–≤–µ—Å—Ç–∏ –∏–º—è –≤—Ä—É—á–Ω—É—é", callback_data='add_user_manual')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_add_user_menu: {e}")
        query.edit_message_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")


def add_user_random(update: Update, context: CallbackContext):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º –∏–º–µ–Ω–µ–º"""
    try:
        query = update.callback_query
        query.answer()

        username = generate_random_name()
        query.edit_message_text(f"üîÑ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}...")

        result = subprocess.run(
            [ADD_USER_SCRIPT, username],
            capture_output=True,
            text=True
        )

        keyboard = [
            [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='main_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        if result.returncode == 0:
            text = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω:\n<pre>{result.stdout}</pre>"
        else:
            text = f"‚ùå –û—à–∏–±–∫–∞:\n<pre>{result.stderr}</pre>"

        query.edit_message_text(
            text=text,
            parse_mode=ParseMode.HTML,
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        query.edit_message_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")


def process_manual_username(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        username = update.message.text
        update.message.reply_text(f"üîÑ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}...")

        result = subprocess.run(
            [ADD_USER_SCRIPT, username],
            capture_output=True,
            text=True
        )

        keyboard = [
            [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='main_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        if result.returncode == 0:
            text = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω:\n<pre>{result.stdout}</pre>"
        else:
            text = f"‚ùå –û—à–∏–±–∫–∞:\n<pre>{result.stderr}</pre>"

        update.message.reply_text(
            text=text,
            parse_mode=ParseMode.HTML,
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

    return ConversationHandler.END


def show_users_for_deletion(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        query = update.callback_query
        query.answer()

        users = get_users_list()

        if not users:
            query.edit_message_text("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        keyboard = []
        for user in users:
            keyboard.append([InlineKeyboardButton(f"‚ùå –£–¥–∞–ª–∏—Ç—å {user}", callback_data=f'delete_{user}')])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')])

        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_users_for_deletion: {e}")
        query.edit_message_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")


def delete_user(update: Update, context: CallbackContext):
    """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        query = update.callback_query
        query.answer()

        username = query.data.replace('delete_', '')
        query.edit_message_text(f"üîÑ –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}...")

        result = subprocess.run(
            [DEL_USER_SCRIPT, username],
            capture_output=True,
            text=True
        )

        if result.returncode == 0:
            text = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É–¥–∞–ª—ë–Ω"
        else:
            text = f"‚ùå –û—à–∏–±–∫–∞:\n{result.stderr}"

        time.sleep(2)
        start(update, context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        query.edit_message_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")


# ==================== –ë–õ–û–ö–ò–†–û–í–ö–ê –ò –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ï –°–ö–û–†–û–°–¢–ò ====================

def show_block_user_menu(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        query = update.callback_query
        query.answer()

        users = get_users_list()
        active_users = [u.replace("üü¢ ", "") for u in get_active_users()]

        keyboard = []
        for user in users:
            status = "üü¢" if user in active_users else "‚ö™"
            keyboard.append([InlineKeyboardButton(f"{status} {user}", callback_data=f'block_menu_{user}')])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')])

        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:\n"
            "üü¢ - –æ–Ω–ª–∞–π–Ω —Å–µ–π—á–∞—Å\n"
            "‚ö™ - –Ω–µ –≤ —Å–µ—Ç–∏",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_block_user_menu: {e}")
        query.edit_message_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")


def block_user_menu(update: Update, context: CallbackContext):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    try:
        query = update.callback_query
        query.answer()

        username = query.data.replace('block_menu_', '')
        context.user_data['user_to_block'] = username

        keyboard = [
            [InlineKeyboardButton("‚è≥ –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f'temp_block_{username}')],
            [InlineKeyboardButton("üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–≤—Å–µ–≥–¥–∞", callback_data=f'perm_block_{username}')],
            [InlineKeyboardButton("üì∂ –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å", callback_data=f'speed_menu_{username}')],
            [InlineKeyboardButton("‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f'unblock_{username}')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='block_users')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        query.edit_message_text(
            f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {username}",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ block_user_menu: {e}")
        query.edit_message_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")


def temp_block_user(update: Update, context: CallbackContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
    try:
        query = update.callback_query
        query.answer()

        username = query.data.replace('temp_block_', '')
        context.user_data['user_to_block'] = username

        keyboard = [
            [InlineKeyboardButton("1 —á–∞—Å", callback_data='time_1h'),
             InlineKeyboardButton("3 —á–∞—Å–∞", callback_data='time_3h')],
            [InlineKeyboardButton("1 –¥–µ–Ω—å", callback_data='time_24h'),
             InlineKeyboardButton("7 –¥–Ω–µ–π", callback_data='time_168h')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f'block_menu_{username}')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        query.edit_message_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è {username}:",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ temp_block_user: {e}")
        query.edit_message_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")


def perm_block_user(update: Update, context: CallbackContext):
    """–ë–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–≤—Å–µ–≥–¥–∞"""
    try:
        query = update.callback_query
        query.answer()

        username = query.data.replace('perm_block_', '')

        result = subprocess.run(
            [TOGGLE_SCRIPT, username, "block"],
            capture_output=True,
            text=True
        )

        keyboard = [
            [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='main_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        if result.returncode == 0:
            query.edit_message_text(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞",
                reply_markup=reply_markup
            )
        else:
            query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {result.stderr}",
                reply_markup=reply_markup
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ perm_block_user: {e}")
        query.edit_message_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")


def process_block_time(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
    try:
        query = update.callback_query
        query.answer()

        time_choice = query.data.replace('time_', '')
        username = context.user_data.get('user_to_block', '')

        time_map = {
            '1h': (3600, "1 —á–∞—Å"),
            '3h': (10800, "3 —á–∞—Å–∞"),
            '24h': (86400, "24 —á–∞—Å–∞"),
            '168h': (604800, "7 –¥–Ω–µ–π")
        }

        if username and time_choice in time_map:
            seconds, time_text = time_map[time_choice]

            result = subprocess.run(
                [TOGGLE_SCRIPT, username, "block"],
                capture_output=True,
                text=True
            )

            keyboard = [
                [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='main_menu')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            if result.returncode == 0:
                message = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ {time_text}"

                threading.Timer(
                    seconds,
                    unblock_user_after_time,
                    args=[username]
                ).start()

                message += f"\n‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —á–µ—Ä–µ–∑ {time_text}"

                query.edit_message_text(message, reply_markup=reply_markup)
            else:
                query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {result.stderr}", reply_markup=reply_markup)
        else:
            query.edit_message_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_block_time: {e}")
        query.edit_message_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")


def unblock_user(update: Update, context: CallbackContext):
    """–ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        query = update.callback_query
        query.answer()

        username = query.data.replace('unblock_', '')

        result = subprocess.run(
            [TOGGLE_SCRIPT, username, "unblock"],
            capture_output=True,
            text=True
        )

        keyboard = [
            [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='main_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        if result.returncode == 0:
            query.edit_message_text(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
                reply_markup=reply_markup
            )
        else:
            query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞: {result.stderr}",
                reply_markup=reply_markup
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ unblock_user: {e}")
        query.edit_message_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")


def show_speed_menu(update: Update, context: CallbackContext):
    """–ú–µ–Ω—é –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏"""
    try:
        query = update.callback_query
        query.answer()

        username = query.data.replace('speed_menu_', '')
        context.user_data['user_for_speed'] = username

        keyboard = [
            [InlineKeyboardButton("üêå 64 KB/s", callback_data='speed_64k')],
            [InlineKeyboardButton("üö∂ 1 MB/s", callback_data='speed_1m')],
            [InlineKeyboardButton("üö¥ 10 MB/s", callback_data='speed_10m')],
            [InlineKeyboardButton("üèé 20 MB/s", callback_data='speed_20m')],
            [InlineKeyboardButton("‚ö° –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π", callback_data='speed_unlimit')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f'block_menu_{username}')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        query.edit_message_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å –¥–ª—è {username}:",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_speed_menu: {e}")
        query.edit_message_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")


def process_speed_limit(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–∫–æ—Ä–æ—Å—Ç–∏"""
    try:
        query = update.callback_query
        query.answer()

        speed_choice = query.data.replace('speed_', '')
        username = context.user_data.get('user_for_speed', '')

        speed_map = {
            '64k': ('limit_64k', "üêå 64 KB/s"),
            '1m': ('limit_1m', "üö∂ 1 MB/s"),
            '10m': ('limit_10m', "üö¥ 10 MB/s"),
            '20m': ('limit_20m', "üèé 20 MB/s"),
            'unlimit': ('unlimit', "‚ö° –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π")
        }

        if username and speed_choice in speed_map:
            action, speed_text = speed_map[speed_choice]

            result = subprocess.run(
                [SPEED_LIMIT_SCRIPT, username, action],
                capture_output=True,
                text=True,
                timeout=30
            )

            keyboard = [
                [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='main_menu')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            if result.returncode == 0:
                query.edit_message_text(
                    f"‚úÖ –î–ª—è {username} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å: {speed_text}",
                    reply_markup=reply_markup
                )
            else:
                error_msg = result.stderr if result.stderr else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                query.edit_message_text(
                    f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏:\n<code>{error_msg}</code>",
                    parse_mode=ParseMode.HTML,
                    reply_markup=reply_markup
                )
        else:
            query.edit_message_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_speed_limit: {e}")
        query.edit_message_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")


# ==================== –°–ò–°–¢–ï–ú–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

def restart_xray(update: Update, context: CallbackContext):
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç Xray –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
    try:
        query = update.callback_query
        query.answer()

        query.edit_message_text("üîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Xray...")

        # –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª - —ç—Ç–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        try:
            subprocess.run(
                ["pkill", "-SIGHUP", "xray"],
                capture_output=True,
                timeout=5
            )
        except:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ - —Å–∏–≥–Ω–∞–ª –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã
            pass

        # –í—Å–µ–≥–¥–∞ —Å–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—Ö–µ, —Ç–∞–∫ –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É–∂–µ –≤ config.json
        text = "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!\n"
        text += "‚Ä¢ –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è\n"
        text += "‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–∫—Ç–∏–≤–Ω—ã\n"
        text += "‚Ä¢ Xray –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥"

        query.edit_message_text(text)
        time.sleep(3)
        start(update, context)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ restart_xray: {e}")
        query.edit_message_text("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥\nXray –ø—Ä–∏–º–µ–Ω–∏—Ç –∏—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        time.sleep(2)
        start(update, context)

def button_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    query.answer()

    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ callback_data: {query.data}")

    if query.data == 'show_stats':
        show_stats(update, context)
    elif query.data == 'list_users':
        list_users(update, context)
    elif query.data == 'active_users':
        show_active_users(update, context)
    elif query.data == 'add_user':
        show_add_user_menu(update, context)
    elif query.data == 'add_user_random':
        add_user_random(update, context)
    elif query.data == 'add_user_manual':
        query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        return ENTER_USERNAME
    elif query.data == 'delete_user_menu':
        show_users_for_deletion(update, context)
    elif query.data.startswith('delete_'):
        delete_user(update, context)
    elif query.data == 'restart_xray':
        restart_xray(update, context)
    elif query.data == 'main_menu':
        start(update, context)
    elif query.data == 'block_users':
        show_block_user_menu(update, context)
    elif query.data.startswith('block_menu_'):
        block_user_menu(update, context)
    elif query.data.startswith('temp_block_'):
        temp_block_user(update, context)
    elif query.data.startswith('perm_block_'):
        perm_block_user(update, context)
    elif query.data.startswith('time_'):
        process_block_time(update, context)
    elif query.data.startswith('unblock_'):
        unblock_user(update, context)
    elif query.data.startswith('speed_menu_'):
        show_speed_menu(update, context)
    elif query.data.startswith('speed_'):
        process_speed_limit(update, context)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_handler, pattern='^add_user_manual$')],
        states={
            ENTER_USERNAME: [MessageHandler(Filters.text & ~Filters.command, process_manual_username)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    updater = Updater(TELEGRAM_TOKEN, use_context=True)
    dp = updater.dispatcher

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(conv_handler)
    dp.add_handler(CallbackQueryHandler(button_handler))

    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–µ–±—Ö—É–∫–æ–≤
    updater.bot.delete_webhook()

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
    updater.start_polling(drop_pending_updates=True)
    updater.idle()


if __name__ == "__main__":
    main()
